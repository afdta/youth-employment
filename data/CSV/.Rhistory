gg + geom_point(aes(size=poor20sh))
q()
d1 <- read.csv("~/Projects/Brookings/concentrated-poverty/data/source/Metro data - levels.csv", stringsAsFactors=FALSE)
d2 <- read.csv("~/Projects/Brookings/concentrated-poverty/data/source/Metro data - changes.csv", stringsAsFactors=FALSE)
d1$groups <- sub("Non-Hispanic White", "White", d1$group)
d1$yr <- sub("-","_",d1$year)
d2$groups <- sub("Non-Hispanic White", "White", d2$group)
d2$yr <- sub("-","_",d2$year)
View(d2)
View(d2)
unique(d1[d1$groups != d1$group, c("group","groups")])
unique(d1[d1$year != d1$yr, c("year","yr")])
unique(d2[d2$groups != d2$group, c("group","groups")])
nm <- names(d1)
nms <- c("cbsa", "metro", "geotype", "group", "year", "poor", "poor20",
"poor20sh", "poor40", "poor40sh",
"groups", "yr")
for(i in 1:length(nm)){
cat(nm[i])
cat(" == ")
cat(nms[i])
cat("\n")
}
names(d) <- nms
write.csv(d[c("cbsa","metro","geotype","groups","yr","poor","poor20","poor20sh","poor40","poor40sh")],
file="/home/alec/Projects/Brookings/concentrated-poverty/data/CPLevels.csv", row.names=FALSE)
names(d1) <- nms
write.csv(d1[c("cbsa","metro","geotype","groups","yr","poor","poor20","poor20sh","poor40","poor40sh")],
file="/home/alec/Projects/Brookings/concentrated-poverty/data/CPLevels.csv", row.names=FALSE)
write.csv(d1[c("cbsa","geotype","groups","yr","poor","poor20","poor20sh","poor40","poor40sh")],
file="/home/alec/Projects/Brookings/concentrated-poverty/data/CPLevels.csv", row.names=FALSE)
View(d2)
nm2 <- names(d2)
nm2
nms2 <- gsub("X_20plus_share_","poor20sh", nm2)
nms2 <- gsub("_sig","s",nms2)
for(i in 1:length(nm2)){
cat(nm2[i])
cat(" == ")
cat(nms2[i])
cat("\n")
}
nm2 <- names(d2)
nms2 <- gsub("X_20plus_share","poor20sh", nm2)
nms2 <- gsub("_sig","s",nms2)
for(i in 1:length(nm2)){
cat(nm2[i])
cat(" == ")
cat(nms2[i])
cat("\n")
}
nm2 <- names(d2)
nms2 <- gsub("X_20plus_share","sh20", nm2)
nms2 <- gsub("X_40plus_share","sh40", nm2)
nms2 <- gsub("_sig","s",nms2)
for(i in 1:length(nm2)){
cat(nm2[i])
cat(" == ")
cat(nms2[i])
cat("\n")
}
#tweak names on d2
nm2 <- names(d2)
nms2 <- gsub("X_20plus_share","sh20", nm2)
nms2 <- gsub("X_40plus_share","sh40", nms2)
nms2 <- gsub("_sig","s",nms2)
for(i in 1:length(nm2)){
cat(nm2[i])
cat(" == ")
cat(nms2[i])
cat("\n")
}
View(d2)
View(d2)
d2=="Increase"
inc <- d2=="Increase"
View(inc)
class(inc)
type(inc)
mode(inc)
View(inc)
View(inc)
d2[d2=="Increase"] <- 1
View(d2)
View(d2)
d2[d2=="Decrease"] <- -1
d2[d2=="No Change"] <- 0
View(d2)
names(d2) <- nms2
View(d2)
nms2
dput(nms2)
write.csv(d2[c("cbsa", "geotype", "groups", "sh20_00to0509", "sh20_00to0509s",
"sh20_0509to1014", "sh20_0509to1014s", "sh20_00to1014", "sh20_00to1014s",
"sh40_00to0509", "sh40_00to0509s", "sh40_0509to1014", "sh40_0509to1014s",
"sh40_00to1014", "sh40_00to1014s")],
file="/home/alec/Projects/Brookings/concentrated-poverty/data/CPChanges.csv", row.names=FALSE)
View(d1)
View(d2)
library("reshape2")
View(d2)
d3 <- melt(data = d2, id.vars = c("cbsa","geotype","groups"), measure.vars = c("sh20_00to0509", "sh20_0509to1014", "sh20_00to1014", "sh40_00to0509", "sh40_0509to1014", "sh40_00to1014"))
View(d3)
View(d1)
d3 <- melt(data = d2, id.vars = c("cbsa","geotype","groups"), measure.vars = c("sh20_00to0509", "sh20_0509to1014", "sh20_00to1014", "sh40_00to0509", "sh40_0509to1014", "sh40_00to1014",
"sh20_00to0509s", "sh20_0509to1014s", "sh20_00to1014s", "sh40_00to0509s", "sh40_0509to1014s", "sh40_00to1014s"))
View(d3)
View(d1)
View(d3)
strplit(d3$variable,"_")
ll<-strsplit(d3$variable,"_")
d3$share <- substring(d3$variable, 1, 4)
View(d3)
d3$yr <- gsub("s|sh20_|sh40_", "", d3$variable)
View(d3)
substrRight <- function(x, n){
return(substr(x, nchar(x)-n+1, nchar(x)))
}
View(d3)
substrRight(d3$variable,1)
View(d3)
substrRight(as.character(d3$variable), 1)
d3$issig <- ifelse(substrRight(as.character(d3$variable), 1)=="s", 1, 0)
View(d3)
View(d3)
d3$share <- ifelse(d3$share=="sh20", "poor20sh", ifelse(d3$share=="sh40", "poor40sh", NA))
View(d3)
d4 <- dcast(d3, cbsa + geotype + groups + yr ~ share + issig, value.var="value")
View(d4)
d3$issig <- ifelse(substrRight(as.character(d3$variable), 1)=="s", "s", NA)
d4 <- dcast(d3, cbsa + geotype + groups + yr ~ share + issig, value.var="value")
View(d4)
d3$issig <- ifelse(substrRight(as.character(d3$variable), 1)=="s", "s", "v")
d4 <- dcast(d3, cbsa + geotype + groups + yr ~ share + issig, value.var="value")
View(d4)
d3$value <- as.numeric(d3$value)
View(d3)
d3 <- melt(data = d2, id.vars = c("cbsa","geotype","groups"), measure.vars = c("sh20_00to0509", "sh20_0509to1014", "sh20_00to1014", "sh40_00to0509", "sh40_0509to1014", "sh40_00to1014",
"sh20_00to0509s", "sh20_0509to1014s", "sh20_00to1014s", "sh40_00to0509s", "sh40_0509to1014s", "sh40_00to1014s"))
d3$value2 <- as.numeric(d3$value)
d3$share <- substring(d3$variable, 1, 4)
d3$share <- ifelse(d3$share=="sh20", "poor20sh", ifelse(d3$share=="sh40", "poor40sh", NA))
d3$yr <- gsub("s|sh20_|sh40_", "", d3$variable)
#http://stackoverflow.com/questions/7963898/extracting-the-last-n-characters-from-a-string-in-r
substrRight <- function(x, n){
return(substr(x, nchar(x)-n+1, nchar(x)))
}
d3$issig <- ifelse(substrRight(as.character(d3$variable), 1)=="s", "s", "v")
View(d3)
View(d2)
d4 <- dcast(d3, cbsa + geotype + groups + yr ~ share + issig, value.var="value")
View(d4)
d4[d4$poor20sh_s=="#DIV/0", ]
d4[d4$poor20sh_s=="#DIV/0!", ]
d4[d4$poor20sh_s=="#DIV/0!" | d4$poor40sh_s=="#DIV/0!", ]
d4 <- dcast(d3, cbsa + geotype + groups + yr ~ share + issig, value.var="value2")
View(d4)
nm4 <- names(d4)
View(d1)
nm4 <- names(d4)
nm4
dput(nm4)
nms4 <- c("cbsa", "geotype", "groups", "yr", "poor20sh_s", "poor20sh_v", "poor40sh_s", "poor40sh_v")
nm4
nms4
nms4 <- c("cbsa", "geotype", "groups", "yr", "poor20shsig", "poor20sh", "poor40shsig", "poor40sh")
nm4
nms4
names(d4) <- nms4
dput(names(d1))
d1$poor20shsig <- na
d1$poor20shsig <- NA
d1$poor40shsig <- NA
head(d1)
dput(names(d1))
d5 <- rbind(d4, d1[c("cbsa", "geotype", "groups", "yr", "poor20sh", "poor40sh", "poor20shsig", "poor40shsig")])
View(d5)
d5split <- split(d5, list(d5$geotype, d5$groups, d5$yr))
summary(d5split[1])
summary(d5split[[1]])
summary(d5split[[1]][c("poor20sh","poor40sh")])
s<-summary(d5split[[1]][c("poor20sh","poor40sh")])
as.data.frame(s)
quantile(d5split[[1]]$poor20sh, c(0.1, 0.5, 0.9))
range(d5split[[1]]$poor20sh)
d5split[[1]]
lapply(d5split, function(e){
cat(e[1,"geotype"])
cat(" | ")
cat(e[1,"groups"])
cat(" | ")
cat(e[1,"yr"])
cat(" | 20%: ")
cat(range(e$poor20sh))
cat(" | 40%:  ")
cat(range(e$poor40sh))
})
lapply(d5split, function(e){
st = paste(e[1,"geotype"],"|",e[1,"groups"],"|",e[1,"yr"],"20%:",range(e$poor20sh),"40%:",range(e$poor40sh))
return(st)
})
sapply(d5split, function(e){
sapply(d5split, function(e){
st = paste(e[1,"geotype"],"|",e[1,"groups"],"|",e[1,"yr"],"20%:",range(e$poor20sh),"40%:",range(e$poor40sh))
return(st)
})
pri;
/
sapply(d5split, function(e){
st = paste(e[1,"geotype"],"|",e[1,"groups"],"|",e[1,"yr"],"20%:",range(e$poor20sh),"40%:",range(e$poor40sh))
return(st)
})
sapply(d5split, function(e){
st = paste(e[1,"geotype"],"|",e[1,"groups"],"|",e[1,"yr"],"20%:",range(e$poor20sh)[1],range(e$poor20sh)[2],"40%:",range(e$poor40sh)[1],range(e$poor40sh)[2])
return(st)
})
d3 <- melt(data = d2, id.vars = c("cbsa","geotype","groups"), measure.vars = c("sh20_00to0509", "sh20_0509to1014", "sh40_00to0509", "sh40_0509to1014",
"sh20_00to0509s", "sh20_0509to1014s", "sh40_00to0509s", "sh40_0509to1014s"))
d3$value2 <- as.numeric(d3$value)
d3$share <- substring(d3$variable, 1, 4)
d3$share <- ifelse(d3$share=="sh20", "poor20sh", ifelse(d3$share=="sh40", "poor40sh", NA))
d3$yr <- gsub("s|sh20_|sh40_", "", d3$variable)
#http://stackoverflow.com/questions/7963898/extracting-the-last-n-characters-from-a-string-in-r
substrRight <- function(x, n){
return(substr(x, nchar(x)-n+1, nchar(x)))
}
d3$issig <- ifelse(substrRight(as.character(d3$variable), 1)=="s", "s", "v")
d4 <- dcast(d3, cbsa + geotype + groups + yr ~ share + issig, value.var="value2")
nm4 <- names(d4)
nms4 <- c("cbsa", "geotype", "groups", "yr", "poor20shsig", "poor20sh", "poor40shsig", "poor40sh")
names(d4) <- nms4
d1$poor20shsig <- NA
d1$poor40shsig <- NA
d5 <- rbind(d4, d1[c("cbsa", "geotype", "groups", "yr", "poor20sh", "poor40sh", "poor20shsig", "poor40shsig")])
d5split <- split(d5, list(d5$geotype, d5$groups, d5$yr))
sapply(d5split, function(e){
st = paste(e[1,"geotype"],"|",e[1,"groups"],"|",e[1,"yr"],"20%:",range(e$poor20sh)[1],range(e$poor20sh)[2],"40%:",range(e$poor40sh)[1],range(e$poor40sh)[2])
return(st)
})
d5split2 <- split(d5, list(d5$yr))
sapply(d5split2, function(e){
st = paste(e[1,"yr"],"20%:",range(e$poor20sh)[1],range(e$poor20sh)[2],"40%:",range(e$poor40sh)[1],range(e$poor40sh)[2])
return(st)
})
write.csv(d5,file="/home/alec/Projects/Brookings/concentrated-poverty/data/CPMetro.csv", row.names=FALSE)
library("rgdal")
library("jsonlite")
library("metromonitor")
shapes <- readOGR("/home/alec/Data/concentrated-poverty-shapes/2009 tract shapefile/","tracts")
esri <- readOGR("/home/alec/Data/concentrated-poverty-shapes/2009 tract shapefile/","tracts")
head(esri@data)
head(shapes@data)
shapes <- spChFIDs(esri, as.character(esri$FIPS))
head(shapes@data)
shapes@polygons[[1]]
str(shapes@polygons)
poly <- shapes@polygons
poly <- shapes@polygons[1]
poly
str(poly)
poly <- shapes@polygons[[1]]
str(poly)
sum(shapes$FIPS==sapply(shapes@polygons, function(e){return e@ID})) == length(shapes)
sum(shapes$FIPS==sapply(shapes@polygons, function(e){return(e@ID)})) == length(shapes)
sum(shapes$FIPS==sapply(shapes@polygons, function(e){return(e@ID)}))
length(shapes)
#import data
tractDTA <- read.csv("/home/alec/Projects/Brookings/concentrated-poverty/data/source/2005-09 tracts for interactive RECODE.csv",
colClasses=c(tract="character", cbsa="character"),
stringsAsFactors=FALSE, na.strings=c("","NA","#N/A"))
#create a top 100 metro list
cbsas <- unique(tractDTA[c("cbsa","metro")])
t100 <- metropops(TRUE, "2013")
cbsa100 <- merge(cbsas, t100[c("CBSA_Code","CBSA_Title")], by.x="cbsa", by.y="CBSA_Code")
sum(cbsa100$metro == cbsa100$CBSA_Title)
tractMetro <- tractDTA[tractDTA$cbsa %in% cbsa100$cbsa, ]
newnames <- c("tract", "exclude", "supp", "cbsa", "metro", "city", "plfips", "place", "poor0509", "pov0509", "tractR", "poorR", "povR", "note")
names(tractMetro) <- newnames
head(shapes@data)
inshp <- which(tractMetro$tract %in% shapes@data$FIPS) #obs from data that are in shapefile
length(shapes)
indat <- which(shapes@data$FIPS %in% tractMetro$tract) #obs from shapefile that are in data
ninesri <- tractMetro[!(tractMetro$tract %in% esri@data$FIPS), ]
View(ninesri)
shapes_sub <- shapes[indat,]
length(shapes_sub)
dat_sub <- tractMetro[inshp,c("tract","exclude","supp","cbsa","city","plfips","pov0509")]
Sr <- SpatialPolygons(shapes_sub@polygons, proj4string=shapes_sub@proj4string)
rownames(dat_sub) <- dat_sub$tract
allshp <- SpatialPolygonsDataFrame(Sr, dat_sub, match.ID = TRUE)
length(allshp)
sum(sapply(allshp@polygons, function(e){return e@ID}) == allshp@data$tract)
sum(sapply(allshp@polygons, function(e){return(e@ID)}) == allshp@data$tract)
sum(sapply(allshp@polygons, function(e){return(e@ID)}) == allshp@data$tract) == length(allshp)
head(allshp@data)
q()
library("rgdal")
library("jsonlite")
library("metromonitor")
esri <- readOGR("/home/alec/Data/concentrated-poverty-shapes/2009 tract shapefile/","tracts")
shapes <- spChFIDs(esri, as.character(esri$FIPS))
sum(shapes$FIPS==sapply(shapes@polygons, function(e){return(e@ID)})) == length(shapes)
#import data
tractDTA <- read.csv("/home/alec/Projects/Brookings/concentrated-poverty/data/source/2005-09 tracts for interactive RECODE.csv",
colClasses=c(tract="character", cbsa="character"),
stringsAsFactors=FALSE, na.strings=c("","NA","#N/A"))
#create a top 100 metro list
cbsas <- unique(tractDTA[c("cbsa","metro")])
t100 <- metropops(TRUE, "2013")
cbsa100 <- merge(cbsas, t100[c("CBSA_Code","CBSA_Title")], by.x="cbsa", by.y="CBSA_Code")
sum(cbsa100$metro == cbsa100$CBSA_Title)
tractMetro <- tractDTA[tractDTA$cbsa %in% cbsa100$cbsa, ]
newnames <- c("tract", "exclude", "supp", "cbsa", "metro", "city", "plfips", "place", "poor0509", "pov0509", "tractR", "poorR", "povR", "note")
newnames
names(tractMetro)
names(tractMetro) <- newnames
inshp <- which(tractMetro$tract %in% shapes@data$FIPS) #obs from data that are in shapefile
indat <- which(shapes@data$FIPS %in% tractMetro$tract) #obs from shapefile that are in data
ninesri <- tractMetro[!(tractMetro$tract %in% esri@data$FIPS), ]
View(ninesri)
shapes_sub <- shapes[indat,]
dat_sub <- tractMetro[inshp,c("tract","exclude","supp","cbsa","city","plfips","pov0509")]
Sr <- SpatialPolygons(shapes_sub@polygons, proj4string=shapes_sub@proj4string)
rownames(dat_sub) <- dat_sub$tract
allshp <- SpatialPolygonsDataFrame(Sr, dat_sub, match.ID = TRUE)
length(allshp)
sum(sapply(allshp@polygons, function(e){return(e@ID)}) == allshp@data$tract) == length(allshp) #good join
makeWriteShp09 <- function(cbsa){
g <- allshp[as.character(allshp@data$cbsa)==cbsa & !is.na(allshp@data$cbsa),]
writeOGR(g, "/home/alec/Data/tiger-line/cbsa_shps00", cbsa, driver="ESRI Shapefile")
}
for(c in cbsa100$cbsa){
makeWriteShp09(c)
}
q()
#to do: test the geo codes here
#question: why are some obs missing? if num, denom are both NA? is 2000 MOE zero always?
library("reshape2")
library("jsonlite")
setwd("~/Projects/Brookings/DataViz/youth-employment/data/CSV/")
setwd("~/Projects/Brookings/youth-employment/data/CSV/")
for(f in list.files()){
assign(sub("\\.csv","",f), read.csv(f, na.strings=c(""," "), stringsAsFactors=FALSE) )
}
rm(list=c("f"))
lv <- function(df){
nm <- names(df)
nl <- ""
s <- paste("(", 1:length(nm),")...", nm, sep="",collapse="\n")
cat(s)
}
#store final processed data in
dy <- list()
er <- list()
ur <- list()
#slim down the DY data
dy$char_edu <- DY_Char_Edu[,c(1,3,5,10,12,17,19,24,26,31:37)]
dy$char_nativity <- DY_Char_Nativity[,c(1,3,5,10,12,17,19,24:28)]
dy$char_race <- DY_Char_Race[,c(1,3,5,10,12,17,19,24,26,31,33,38,40,45,46:55)]
dy$char_sex <- DY_Char_Sex[,c(1,3,5,10,12,17,19,24,25,26)]
dy$nativity <- DY_Nativity[,c(1,3,5,7,12,14,19,20,21)]
dy$race <- DY_Race[,c(1,3,5,7,12,14,19,20,21)]
dy$sex <- DY_Sex[,c(1,3,5,7,12,14,19,20,21)]
dy$overall <- DY_Overall[,c(1,3,5,10,12,17,18,19)]
#slim down the ER data
er$edu <- ER_Edu[!(ER_Edu$age_recode=="16-19" & (ER_Edu$ed_label %in% c("SC","AA","BA+"))),c(1,2,4,13,7,12,15,20,21,22)]
er$race <- ER_Race[,c(1,2,4,13,7,12,15,20,21,22)]
er$sex <- ER_Sex[,c(1,2,4,13,7,12,15,20,21,22)]
er$overall <- ER_Overall[,c(1,2,4,6,11,13,18,19,20)]
#slim down the UR data
ur$edu <- UR_Edu[!(UR_Edu$age_recode=="16-19" & (UR_Edu$ed_label %in% c("SC","AA","BA+"))),c(1,2,4,13,7,12,15,20,21,22)]
ur$race <- UR_Race[,c(1,2,4,13,7,12,15,20,21,22)]
ur$sex <- UR_Sex[,c(1,2,4,13,7,12,15,20,21,22)]
ur$overall <- UR_Overall[,c(1,2,4,6,11,13,18,19,20)]
#make rectangular -- import strings not as factors
er$edu[,c("re_label","sex_label")] <- list(a="ar",b="bs")
er$edu$ed_label <- sub("\\+","Plus",er$edu$ed_label)
er$race[,c("ed_label","sex_label")] <- list(a="ae",b="bs")
er$sex[,c("ed_label","re_label")] <- list(a="ae",b="ar")
er$overall[,c("ed_label","sex_label","re_label")] <- list(a="ae",b="bs",c="ar")
er$all <- rbind(er$edu,er$race,er$sex,er$overall)
er$all$age_recode <- sub("-","to",er$all$age_recode)
er$all$sex_label <- sub("ale|emale","",er$all$sex_label)
er$all$re_label <- sub("sian|lack|hite|ther|atino","",er$all$re_label)
ur$edu[,c("re_label","sex_label")] <- list(a="ar",b="bs")
ur$edu$ed_label <- sub("\\+","Plus",ur$edu$ed_label)
ur$race[,c("ed_label","sex_label")] <- list(a="ae",b="bs")
ur$sex[,c("ed_label","re_label")] <- list(a="ae",b="ar")
ur$overall[,c("ed_label","sex_label","re_label")] <- list(a="ae",b="bs",c="ar")
ur$all <- rbind(ur$edu,ur$race,ur$sex,ur$overall)
ur$all$age_recode <- sub("-","to",ur$all$age_recode)
ur$all$sex_label <- sub("ale|emale","",ur$all$sex_label)
ur$all$re_label <- sub("sian|lack|hite|ther|atino","",ur$all$re_label)
dy$nativity[,c("re_label","sex_label")] <- list(a="ar",b="bs")
dy$race[,c("fb_label","sex_label")] <- list(a="an",b="bs")
dy$sex[,c("re_label","fb_label")] <- list(a="ar",b="an")
dy$overall[,c("re_label","sex_label","fb_label")] <- list(a="ar",b="bs",c="an")
dy$all <- rbind(dy$overall, dy$nativity, dy$race, dy$sex)
dy$all$age_recode <- sub("-","to",dy$all$age_recode)
dy$all$sex_label <- sub("ale|emale","",dy$all$sex_label)
dy$all$re_label <- sub("sian|lack|hite|ther|atino","",dy$all$re_label)
splitter <- function(df, keep, renames=keep, dy=FALSE){
if("YEAR" %in% names(df)){
D <- df[df$YEAR %in% 2008:2014, ]
D$YEAR <- D$YEAR - 2000
} else{
D <- df
}
if(dy){
lastsplit <- "fb_label"
} else{
lastsplit <- "ed_label"
}
s <- split(D, D$Assigned_CBSA)
s0 <- lapply(s, function(e){
#split metro groups by age
s0s <- split(e, e$age_recode)
s1 <- lapply(s0s, function(e){
#split metro age groups by sex
s1s <- split(e, e$sex_label)
s2 <- lapply(s1s, function(e){
#split metro-age-sex groups by race
s2s <- split(e, e$re_label)
s3 <- lapply(s2s, function(e){
#split metro-age-sex-race groups by edu
s3s <- split(e, e[,lastsplit])
s4 <- lapply(s3s, function(e){
K <- e[keep]
names(K) <- renames
K$SH <- round(K$SH*100,1)
K$SH_M <- round(K$SH_M*100,1)
return(K)
})
return(s4)
})
return(s3)
})
return(s2)
})
return(s1)
})
return(s0)
}
splitDY <- function(df){
df$age_recode <- sub("-","to",df$age_recode)
m <- split(df, df$Assigned_CBSA)
m1 <- lapply(m, function(e){
return(split(e, e$age_recode))
})
return(m1)
}
ERSplit <- splitter(er$all, c("YEAR","EMP","denom","ER","MOE_ER"), c("Y","E","P","SH","SH_M"))
URSplit <- splitter(ur$all, c("YEAR","UNEMP","denom","UR","MOE_UR"), c("Y","U","P","SH","SH_M"))
DYSplits <- list()
DYSplits$Rates <- splitter(dy$all, c("DY","denom","ShareDY","MOE_ShareDY"), c("DY","P","SH","SH_M"), TRUE)
DYSplits$Char <- list()
DYSplits$Char$Edu <- splitDY(dy$char_edu)
DYSplits$Char$Race <- splitDY(dy$char_race)
DYSplits$Char$Nativity <- splitDY(dy$char_nativity)
DYSplits$Char$Sex <- splitDY(dy$char_sex)
names(DYSplit$Rates$16to19)
names(DYSplit$Rates[["16to19"]])
names(DYSplits$Rates[["16to19"]])
names(DYSplits$Rates[[0]][["16to19"]])
names(DYSplits$Rates[[0]][["16to19"]])
names(DYSplits$Rates[[1]][["16to19"]])
names(DYSplits$Rates[[1]][["16to19"]][[bs]])
names(DYSplits$Rates[[1]][["16to19"]][["bs"]])
names(DYSplits$Rates[[1]][["16to19"]][["bs"]][["ar"]])
names(DYSplits$Rates[[1]][["16to19"]][["bs"]][["ar"]][["an"]])
overall <- list()
overall$er <- lapply(ERSplit, function(e){
r <- list("16to19"=e[["16to19"]]$bs$ar$ae, "20to24"=e[["20to24"]]$bs$ar$ae, "25to54"=e[["25to54"]]$bs$ar$ae )
return(r)
})
overall$ur <- lapply(URSplit, function(e){
r <- list("16to19"=e[["16to19"]]$bs$ar$ae, "20to24"=e[["20to24"]]$bs$ar$ae, "25to54"=e[["25to54"]]$bs$ar$ae )
return(r)
})
overall$dy <- lapply(DYSplits$Rates, function(e){
r <- list("16to19"=e[["16to19"]]$bs$ar$an, "20to24"=e[["20to24"]]$bs$ar$ae, "25to54"=e[["25to54"]]$bs$ar$ae )
return(r)
})
writeLines(toJSON(overall, digits=5, na="null"), "../overall.json")
overall <- list()
overall$er <- lapply(ERSplit, function(e){
r <- list("16to19"=e[["16to19"]]$bs$ar$ae, "20to24"=e[["20to24"]]$bs$ar$ae, "25to54"=e[["25to54"]]$bs$ar$ae )
return(r)
})
overall$ur <- lapply(URSplit, function(e){
r <- list("16to19"=e[["16to19"]]$bs$ar$ae, "20to24"=e[["20to24"]]$bs$ar$ae, "25to54"=e[["25to54"]]$bs$ar$ae )
return(r)
})
overall$dy <- lapply(DYSplits$Rates, function(e){
r <- list("16to19"=e[["16to19"]]$bs$ar$an, "20to24"=e[["20to24"]]$bs$ar$an, "25to54"=e[["25to54"]]$bs$ar$an )
return(r)
})
writeLines(toJSON(overall, digits=5, na="null"), "../overall.json")
names(DYSplits$Rates)
names(DYSplits$Rates[[0]])
names(DYSplits$Rates[[1]])
names(DYSplits$Rates[[1]][[1]])
names(DYSplits$Rates[[1]][[1]][[1]])
names(DYSplits$Rates[[1]][[1]][[1]][[2]])
names(DYSplits$Rates[[1]][[1]][[1]][[2]][[1]])
names(overall$dy[[0]])
names(overall$dy[[1]])
names(overall$dy[[1]][[1]])
tst <- (overall$dy[[1]])
tst
str(tst[[1]])
q()
